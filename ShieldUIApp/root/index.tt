<!DOCTYPE html>
<html>
<head>
    <title>Shield UI and Perl Catalyst Integration</title>
    <meta charset="utf-8" />

    <link id="themecss" rel="stylesheet" type="text/css" href="//www.shieldui.com/shared/components/latest/css/light/all.min.css" />
    <script type="text/javascript" src="//www.shieldui.com/shared/components/latest/js/jquery-1.11.1.min.js"></script>
    <script type="text/javascript" src="//www.shieldui.com/shared/components/latest/js/shieldui-all.min.js"></script>
</head>
<body>
    <h3>Shield UI Grid Example</h3>

    <div id="grid" style="max-width:800px; margin:auto; margin-top:40px;"></div>

    <script type="text/javascript">
        jQuery(function($) {
            $("#grid").shieldGrid({
                dataSource: {
                    events: {
                        error: function (event) {
                            if (event.errorType == "transport") {
                                // transport error is an ajax error; event holds the xhr object
                                alert("transport error: " + event.error.statusText);

                                // reload the data source if the operation that failed was save
                                if (event.operation == "save") {
                                    this.read();
                                }
                            }
                            else {
                                // other data source error - validation, etc
                                alert(event.errorType + " error: " + event.error);
                            }
                        }
                    },
                    remote: {
                        read: {
                            type: "GET",
                            url: "/book",
                            dataType: "json"
                        },
                        modify: {
                            create: function (items, success, error) {
                                var newItem = items[0];
                                $.ajax({
                                    type: "POST",
                                    url: "/book",
                                    dataType: "json",
                                    contentType: "application/json",
                                    data: JSON.stringify(newItem.data),
                                    complete: function (xhr) {
                                        if (xhr.readyState == 4) {
                                            if (xhr.status == 201) {
                                                // update the id of the newly-created item with the 
                                                // one returned from the server in the Location hader url
                                                var location = xhr.getResponseHeader("Location");
                                                newItem.data.id = +location.replace(/^.*?\/([\d]+)$/, "$1");
                                                success();
                                                return;
                                            }
                                        }
                                        error(xhr);
                                    }
                                });
                            },
                            update: function (items, success, error) {
                                $.ajax({
                                    type: "PUT",
                                    url: "/book/" + items[0].data.id,
                                    dataType: "json",
                                    contentType: "application/json",
                                    data: JSON.stringify(items[0].data)
                                }).then(success, error);
                            },
                            remove: function (items, success, error) {
                                $.ajax({
                                    type: "DELETE",
                                    url: "/book/" + items[0].data.id
                                }).then(success, error);
                            }
                        }
                    },
                    schema: {
                        fields: {
                            id: { path: "id", type: Number },
                            title: { path: "title", type: String },
                            author: { path: "author", type: String },
                            rating: { path: "rating", type: Number }
                        }
                    }
                },
                sorting: true,
                rowHover: false,
                columns: [
                    { field: "title", title: "Book Title" },
                    { field: "author", title: "Author" },
                    { field: "rating", title: "Rating", width: 70 },
                    {
                        width: 160,
                        title: " ",
                        buttons: [
                            { commandName: "edit", caption: "Edit" },
                            { commandName: "delete", caption: "Delete" }
                        ]
                    }
                ],
                toolbar: [
                    {
                        buttons: [
                            { commandName: "insert", caption: "Add Book" }
                        ],
                        position: "top"
                    }
                ],
                paging: {
                    pageSize: 10
                },
                editing: {
                    enabled: true,
                    type: "row"
                }
            });
        });
    </script>
</body>
</html>
